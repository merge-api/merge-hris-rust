/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`employees_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmployeesCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`employees_ignore_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmployeesIgnoreCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`employees_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmployeesListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`employees_meta_post_retrieve`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmployeesMetaPostRetrieveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`employees_retrieve`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmployeesRetrieveError {
    UnknownValue(serde_json::Value),
}


/// Creates an `Employee` object with the given values.
pub async fn employees_create(configuration: &configuration::Configuration, x_account_token: &str, employee_endpoint_request: crate::models::EmployeeEndpointRequest, is_debug_mode: Option<bool>, run_async: Option<bool>) -> Result<crate::models::EmployeeResponse, Error<EmployeesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/employees", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = is_debug_mode {
        local_var_req_builder = local_var_req_builder.query(&[("is_debug_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = run_async {
        local_var_req_builder = local_var_req_builder.query(&[("run_async", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Account-Token", x_account_token.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&employee_endpoint_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EmployeesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Ignores a specific row based on the `model_id` in the url. These records will have their properties set to null, and will not be updated in future syncs. The \"reason\" and \"message\" fields in the request body will be stored for audit purposes.
pub async fn employees_ignore_create(configuration: &configuration::Configuration, x_account_token: &str, model_id: &str, ignore_common_model_request: crate::models::IgnoreCommonModelRequest) -> Result<crate::models::IgnoreCommonModel, Error<EmployeesIgnoreCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/employees/ignore/{model_id}", local_var_configuration.base_path, model_id=crate::apis::urlencode(model_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Account-Token", x_account_token.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&ignore_common_model_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EmployeesIgnoreCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of `Employee` objects.
pub async fn employees_list(configuration: &configuration::Configuration, x_account_token: &str, company_id: Option<&str>, created_after: Option<String>, created_before: Option<String>, cursor: Option<&str>, display_full_name: Option<&str>, employment_status: Option<&str>, first_name: Option<&str>, groups: Option<&str>, include_deleted_data: Option<bool>, include_remote_data: Option<bool>, include_sensitive_fields: Option<bool>, last_name: Option<&str>, manager_id: Option<&str>, modified_after: Option<String>, modified_before: Option<String>, page_size: Option<i32>, pay_group_id: Option<&str>, personal_email: Option<&str>, remote_fields: Option<&str>, remote_id: Option<&str>, team_id: Option<&str>, work_email: Option<&str>, work_location_id: Option<&str>) -> Result<crate::models::PaginatedEmployeeList, Error<EmployeesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/employees", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = company_id {
        local_var_req_builder = local_var_req_builder.query(&[("company_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created_after {
        local_var_req_builder = local_var_req_builder.query(&[("created_after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created_before {
        local_var_req_builder = local_var_req_builder.query(&[("created_before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = display_full_name {
        local_var_req_builder = local_var_req_builder.query(&[("display_full_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = employment_status {
        local_var_req_builder = local_var_req_builder.query(&[("employment_status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name {
        local_var_req_builder = local_var_req_builder.query(&[("first_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = local_var_req_builder.query(&[("groups", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_deleted_data {
        local_var_req_builder = local_var_req_builder.query(&[("include_deleted_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_remote_data {
        local_var_req_builder = local_var_req_builder.query(&[("include_remote_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_sensitive_fields {
        local_var_req_builder = local_var_req_builder.query(&[("include_sensitive_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name {
        local_var_req_builder = local_var_req_builder.query(&[("last_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manager_id {
        local_var_req_builder = local_var_req_builder.query(&[("manager_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = modified_after {
        local_var_req_builder = local_var_req_builder.query(&[("modified_after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = modified_before {
        local_var_req_builder = local_var_req_builder.query(&[("modified_before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pay_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("pay_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = personal_email {
        local_var_req_builder = local_var_req_builder.query(&[("personal_email", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = remote_fields {
        local_var_req_builder = local_var_req_builder.query(&[("remote_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = remote_id {
        local_var_req_builder = local_var_req_builder.query(&[("remote_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = team_id {
        local_var_req_builder = local_var_req_builder.query(&[("team_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = work_email {
        local_var_req_builder = local_var_req_builder.query(&[("work_email", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = work_location_id {
        local_var_req_builder = local_var_req_builder.query(&[("work_location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Account-Token", x_account_token.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EmployeesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns metadata for `Employee` POSTs.
pub async fn employees_meta_post_retrieve(configuration: &configuration::Configuration, x_account_token: &str) -> Result<crate::models::MetaResponse, Error<EmployeesMetaPostRetrieveError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/employees/meta/post", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Account-Token", x_account_token.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EmployeesMetaPostRetrieveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns an `Employee` object with the given `id`.
pub async fn employees_retrieve(configuration: &configuration::Configuration, x_account_token: &str, id: &str, include_remote_data: Option<bool>, include_sensitive_fields: Option<bool>, remote_fields: Option<&str>) -> Result<crate::models::Employee, Error<EmployeesRetrieveError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/employees/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = include_remote_data {
        local_var_req_builder = local_var_req_builder.query(&[("include_remote_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_sensitive_fields {
        local_var_req_builder = local_var_req_builder.query(&[("include_sensitive_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = remote_fields {
        local_var_req_builder = local_var_req_builder.query(&[("remote_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("X-Account-Token", x_account_token.to_string());
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EmployeesRetrieveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

