/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`linked_accounts_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LinkedAccountsListError {
    UnknownValue(serde_json::Value),
}


/// List linked accounts for your organization.
pub async fn linked_accounts_list(configuration: &configuration::Configuration, category: Option<&str>, cursor: Option<&str>, end_user_email_address: Option<&str>, end_user_organization_name: Option<&str>, end_user_origin_id: Option<&str>, end_user_origin_ids: Option<&str>, id: Option<&str>, ids: Option<&str>, include_duplicates: Option<bool>, integration_name: Option<&str>, is_test_account: Option<&str>, page_size: Option<i32>, status: Option<&str>) -> Result<crate::models::PaginatedAccountDetailsAndActionsList, Error<LinkedAccountsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/linked-accounts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = category {
        local_var_req_builder = local_var_req_builder.query(&[("category", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end_user_email_address {
        local_var_req_builder = local_var_req_builder.query(&[("end_user_email_address", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end_user_organization_name {
        local_var_req_builder = local_var_req_builder.query(&[("end_user_organization_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end_user_origin_id {
        local_var_req_builder = local_var_req_builder.query(&[("end_user_origin_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = end_user_origin_ids {
        local_var_req_builder = local_var_req_builder.query(&[("end_user_origin_ids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ids {
        local_var_req_builder = local_var_req_builder.query(&[("ids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_duplicates {
        local_var_req_builder = local_var_req_builder.query(&[("include_duplicates", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = integration_name {
        local_var_req_builder = local_var_req_builder.query(&[("integration_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_test_account {
        local_var_req_builder = local_var_req_builder.query(&[("is_test_account", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<LinkedAccountsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

