/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 */

/// PayrollRun : # The PayrollRun Object ### Description The `PayrollRun` object is used to represent a payroll run. This payroll run is not specific to an employee.  ### Usage Example Fetch from the `LIST PayrollRuns` endpoint and filter by `ID` to show all payroll runs.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PayrollRun {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The third-party API ID of the matching object.
    #[serde(rename = "remote_id", skip_serializing_if = "Option::is_none")]
    pub remote_id: Option<String>,
    /// The state of the payroll run
    #[serde(rename = "run_state", skip_serializing_if = "Option::is_none")]
    pub run_state: Option<Box<crate::models::RunStateEnum>>,
    /// The type of the payroll run
    #[serde(rename = "run_type", skip_serializing_if = "Option::is_none")]
    pub run_type: Option<Box<crate::models::RunTypeEnum>>,
    /// The day and time the payroll run started.
    #[serde(rename = "start_date", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// The day and time the payroll run ended.
    #[serde(rename = "end_date", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// The day and time the payroll run was checked.
    #[serde(rename = "check_date", skip_serializing_if = "Option::is_none")]
    pub check_date: Option<String>,
    #[serde(rename = "remote_data", skip_serializing_if = "Option::is_none")]
    pub remote_data: Option<Vec<crate::models::RemoteData>>,
    /// Indicates whether or not this object has been deleted by third party webhooks.
    #[serde(rename = "remote_was_deleted", skip_serializing_if = "Option::is_none")]
    pub remote_was_deleted: Option<bool>,
    #[serde(rename = "field_mappings", skip_serializing_if = "Option::is_none")]
    pub field_mappings: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl PayrollRun {
    /// # The PayrollRun Object ### Description The `PayrollRun` object is used to represent a payroll run. This payroll run is not specific to an employee.  ### Usage Example Fetch from the `LIST PayrollRuns` endpoint and filter by `ID` to show all payroll runs.
    pub fn new() -> PayrollRun {
        PayrollRun {
            id: None,
            remote_id: None,
            run_state: None,
            run_type: None,
            start_date: None,
            end_date: None,
            check_date: None,
            remote_data: None,
            remote_was_deleted: None,
            field_mappings: None,
        }
    }
}


