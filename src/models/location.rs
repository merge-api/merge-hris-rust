/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 */

/// Location : # The Location Object ### Description The `Location` object is used to represent a Location for a Company or Employee address. This is shared across many models and is referenced whenever a location is stored.  ### Usage Example Fetch from the `LIST Locations` endpoint and filter by `ID` to show all office locations.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Location {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The third-party API ID of the matching object.
    #[serde(rename = "remote_id", skip_serializing_if = "Option::is_none")]
    pub remote_id: Option<String>,
    /// The location's name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The location's phone number.
    #[serde(rename = "phone_number", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<String>,
    /// Line 1 of the location's street address.
    #[serde(rename = "street_1", skip_serializing_if = "Option::is_none")]
    pub street_1: Option<String>,
    /// Line 2 of the location's street address.
    #[serde(rename = "street_2", skip_serializing_if = "Option::is_none")]
    pub street_2: Option<String>,
    /// The location's city.
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    /// The location's state. Represents a region if outside of the US.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The location's zip code or postal code.
    #[serde(rename = "zip_code", skip_serializing_if = "Option::is_none")]
    pub zip_code: Option<String>,
    /// The location's country.
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<Box<crate::models::CountryEnum>>,
    /// The location's type. Can be either WORK or HOME
    #[serde(rename = "location_type", skip_serializing_if = "Option::is_none")]
    pub location_type: Option<Box<crate::models::LocationTypeEnum>>,
    #[serde(rename = "remote_data", skip_serializing_if = "Option::is_none")]
    pub remote_data: Option<Vec<crate::models::RemoteData>>,
    /// Indicates whether or not this object has been deleted by third party webhooks.
    #[serde(rename = "remote_was_deleted", skip_serializing_if = "Option::is_none")]
    pub remote_was_deleted: Option<bool>,
    #[serde(rename = "field_mappings", skip_serializing_if = "Option::is_none")]
    pub field_mappings: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl Location {
    /// # The Location Object ### Description The `Location` object is used to represent a Location for a Company or Employee address. This is shared across many models and is referenced whenever a location is stored.  ### Usage Example Fetch from the `LIST Locations` endpoint and filter by `ID` to show all office locations.
    pub fn new() -> Location {
        Location {
            id: None,
            remote_id: None,
            name: None,
            phone_number: None,
            street_1: None,
            street_2: None,
            city: None,
            state: None,
            zip_code: None,
            country: None,
            location_type: None,
            remote_data: None,
            remote_was_deleted: None,
            field_mappings: None,
        }
    }
}


