/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AccountDetailsAndActionsIntegration {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "categories")]
    pub categories: Vec<crate::models::CategoriesEnum>,
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    #[serde(rename = "square_image", skip_serializing_if = "Option::is_none")]
    pub square_image: Option<String>,
    #[serde(rename = "color")]
    pub color: String,
    #[serde(rename = "slug")]
    pub slug: String,
    #[serde(rename = "passthrough_available")]
    pub passthrough_available: bool,
    #[serde(rename = "available_model_operations", skip_serializing_if = "Option::is_none")]
    pub available_model_operations: Option<Vec<crate::models::ModelOperation>>,
}

impl AccountDetailsAndActionsIntegration {
    pub fn new(name: String, categories: Vec<crate::models::CategoriesEnum>, color: String, slug: String, passthrough_available: bool) -> AccountDetailsAndActionsIntegration {
        AccountDetailsAndActionsIntegration {
            name,
            categories,
            image: None,
            square_image: None,
            color,
            slug,
            passthrough_available,
            available_model_operations: None,
        }
    }
}


