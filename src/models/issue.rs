/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Issue {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::models::IssueStatusEnum>>,
    #[serde(rename = "error_description")]
    pub error_description: String,
    #[serde(rename = "end_user", skip_serializing_if = "Option::is_none")]
    pub end_user: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "first_incident_time", skip_serializing_if = "Option::is_none")]
    pub first_incident_time: Option<String>,
    #[serde(rename = "last_incident_time", skip_serializing_if = "Option::is_none")]
    pub last_incident_time: Option<String>,
    #[serde(rename = "is_muted", skip_serializing_if = "Option::is_none")]
    pub is_muted: Option<bool>,
    #[serde(rename = "error_details", skip_serializing_if = "Option::is_none")]
    pub error_details: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl Issue {
    pub fn new(error_description: String) -> Issue {
        Issue {
            id: None,
            status: None,
            error_description,
            end_user: None,
            first_incident_time: None,
            last_incident_time: None,
            is_muted: None,
            error_details: None,
        }
    }
}


