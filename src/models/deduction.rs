/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 */

/// Deduction : # The Deduction Object ### Description The `Deduction` object is used to represent a deduction for a given employee's payroll run. One run could include several deductions.  ### Usage Example Fetch from the `LIST Deductions` endpoint and filter by `ID` to show all deductions.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Deduction {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The deduction's employee payroll run.
    #[serde(rename = "employee_payroll_run", skip_serializing_if = "Option::is_none")]
    pub employee_payroll_run: Option<String>,
    /// The deduction's name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The amount the employee is deducting.
    #[serde(rename = "employee_deduction", skip_serializing_if = "Option::is_none")]
    pub employee_deduction: Option<f32>,
    /// The amount the company is deducting.
    #[serde(rename = "company_deduction", skip_serializing_if = "Option::is_none")]
    pub company_deduction: Option<f32>,
    #[serde(rename = "remote_data", skip_serializing_if = "Option::is_none")]
    pub remote_data: Option<Vec<crate::models::RemoteData>>,
    /// Indicates whether or not this object has been deleted by third party webhooks.
    #[serde(rename = "remote_was_deleted", skip_serializing_if = "Option::is_none")]
    pub remote_was_deleted: Option<bool>,
    #[serde(rename = "field_mappings", skip_serializing_if = "Option::is_none")]
    pub field_mappings: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl Deduction {
    /// # The Deduction Object ### Description The `Deduction` object is used to represent a deduction for a given employee's payroll run. One run could include several deductions.  ### Usage Example Fetch from the `LIST Deductions` endpoint and filter by `ID` to show all deductions.
    pub fn new() -> Deduction {
        Deduction {
            id: None,
            employee_payroll_run: None,
            name: None,
            employee_deduction: None,
            company_deduction: None,
            remote_data: None,
            remote_was_deleted: None,
            field_mappings: None,
        }
    }
}


