/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 */

/// Employment : # The Employment Object ### Description The `Employment` object is used to represent an employment position at a company. These are associated with the employee filling the role.  Please note: Employment objects are constructed if the object does not exist in the remote system.  ### Usage Example Fetch from the `LIST Employments` endpoint and filter by `ID` to show all employees.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Employment {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The third-party API ID of the matching object.
    #[serde(rename = "remote_id", skip_serializing_if = "Option::is_none")]
    pub remote_id: Option<String>,
    /// The employee holding this position.
    #[serde(rename = "employee", skip_serializing_if = "Option::is_none")]
    pub employee: Option<String>,
    /// The position's title.
    #[serde(rename = "job_title", skip_serializing_if = "Option::is_none")]
    pub job_title: Option<String>,
    /// The position's pay rate in dollars.
    #[serde(rename = "pay_rate", skip_serializing_if = "Option::is_none")]
    pub pay_rate: Option<f32>,
    /// The time period this pay rate encompasses.
    #[serde(rename = "pay_period", skip_serializing_if = "Option::is_none")]
    pub pay_period: Option<Box<crate::models::PayPeriodEnum>>,
    /// The position's pay frequency.
    #[serde(rename = "pay_frequency", skip_serializing_if = "Option::is_none")]
    pub pay_frequency: Option<Box<crate::models::PayFrequencyEnum>>,
    /// The position's currency code.
    #[serde(rename = "pay_currency", skip_serializing_if = "Option::is_none")]
    pub pay_currency: Option<Box<crate::models::PayCurrencyEnum>>,
    /// The employment's pay group
    #[serde(rename = "pay_group", skip_serializing_if = "Option::is_none")]
    pub pay_group: Option<String>,
    /// The position's FLSA status.
    #[serde(rename = "flsa_status", skip_serializing_if = "Option::is_none")]
    pub flsa_status: Option<Box<crate::models::FlsaStatusEnum>>,
    /// The position's effective date.
    #[serde(rename = "effective_date", skip_serializing_if = "Option::is_none")]
    pub effective_date: Option<String>,
    /// The position's type of employment.
    #[serde(rename = "employment_type", skip_serializing_if = "Option::is_none")]
    pub employment_type: Option<Box<crate::models::EmploymentTypeEnum>>,
    #[serde(rename = "remote_data", skip_serializing_if = "Option::is_none")]
    pub remote_data: Option<Vec<crate::models::RemoteData>>,
    /// Indicates whether or not this object has been deleted by third party webhooks.
    #[serde(rename = "remote_was_deleted", skip_serializing_if = "Option::is_none")]
    pub remote_was_deleted: Option<bool>,
    #[serde(rename = "field_mappings", skip_serializing_if = "Option::is_none")]
    pub field_mappings: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl Employment {
    /// # The Employment Object ### Description The `Employment` object is used to represent an employment position at a company. These are associated with the employee filling the role.  Please note: Employment objects are constructed if the object does not exist in the remote system.  ### Usage Example Fetch from the `LIST Employments` endpoint and filter by `ID` to show all employees.
    pub fn new() -> Employment {
        Employment {
            id: None,
            remote_id: None,
            employee: None,
            job_title: None,
            pay_rate: None,
            pay_period: None,
            pay_frequency: None,
            pay_currency: None,
            pay_group: None,
            flsa_status: None,
            effective_date: None,
            employment_type: None,
            remote_data: None,
            remote_was_deleted: None,
            field_mappings: None,
        }
    }
}


