/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConditionSchema {
    /// The ID of the condition schema. This ID is used when updating selective syncs for a linked account.
    #[serde(rename = "id")]
    pub id: String,
    /// The common model for which a condition schema is defined.
    #[serde(rename = "common_model", skip_serializing_if = "Option::is_none")]
    pub common_model: Option<String>,
    /// User-facing *native condition* name. e.g. \"Skip Manager\".
    #[serde(rename = "native_name")]
    pub native_name: Option<String>,
    /// The name of the field on the common model that this condition corresponds to, if they conceptually match. e.g. \"location_type\".
    #[serde(rename = "field_name")]
    pub field_name: Option<String>,
    /// Whether this condition can only be applied once. If false, the condition can be AND'd together multiple times.
    #[serde(rename = "is_unique", skip_serializing_if = "Option::is_none")]
    pub is_unique: Option<bool>,
    #[serde(rename = "condition_type")]
    pub condition_type: crate::models::ConditionTypeEnum,
    /// The schemas for the operators that can be used on a condition.
    #[serde(rename = "operators")]
    pub operators: Vec<crate::models::OperatorSchema>,
}

impl ConditionSchema {
    pub fn new(id: String, native_name: Option<String>, field_name: Option<String>, condition_type: crate::models::ConditionTypeEnum, operators: Vec<crate::models::OperatorSchema>) -> ConditionSchema {
        ConditionSchema {
            id,
            common_model: None,
            native_name,
            field_name,
            is_unique: None,
            condition_type,
            operators,
        }
    }
}


