/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 */

/// EmployeePayrollRun : # The EmployeePayrollRun Object ### Description The `EmployeePayrollRun` object is used to represent a payroll run for a specific employee.  ### Usage Example Fetch from the `LIST EmployeePayrollRun` endpoint and filter by `ID` to show all employee payroll runs.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EmployeePayrollRun {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The third-party API ID of the matching object.
    #[serde(rename = "remote_id", skip_serializing_if = "Option::is_none")]
    pub remote_id: Option<String>,
    /// The employee whose payroll is being run.
    #[serde(rename = "employee", skip_serializing_if = "Option::is_none")]
    pub employee: Option<String>,
    /// The payroll being run.
    #[serde(rename = "payroll_run", skip_serializing_if = "Option::is_none")]
    pub payroll_run: Option<String>,
    /// The gross pay from the run.
    #[serde(rename = "gross_pay", skip_serializing_if = "Option::is_none")]
    pub gross_pay: Option<f32>,
    /// The net pay from the run.
    #[serde(rename = "net_pay", skip_serializing_if = "Option::is_none")]
    pub net_pay: Option<f32>,
    /// The day and time the payroll run started.
    #[serde(rename = "start_date", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// The day and time the payroll run ended.
    #[serde(rename = "end_date", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// The day and time the payroll run was checked.
    #[serde(rename = "check_date", skip_serializing_if = "Option::is_none")]
    pub check_date: Option<String>,
    #[serde(rename = "earnings", skip_serializing_if = "Option::is_none")]
    pub earnings: Option<Vec<crate::models::Earning>>,
    #[serde(rename = "deductions", skip_serializing_if = "Option::is_none")]
    pub deductions: Option<Vec<crate::models::Deduction>>,
    #[serde(rename = "taxes", skip_serializing_if = "Option::is_none")]
    pub taxes: Option<Vec<crate::models::Tax>>,
    #[serde(rename = "remote_data", skip_serializing_if = "Option::is_none")]
    pub remote_data: Option<Vec<crate::models::RemoteData>>,
    /// Indicates whether or not this object has been deleted by third party webhooks.
    #[serde(rename = "remote_was_deleted", skip_serializing_if = "Option::is_none")]
    pub remote_was_deleted: Option<bool>,
    #[serde(rename = "field_mappings", skip_serializing_if = "Option::is_none")]
    pub field_mappings: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl EmployeePayrollRun {
    /// # The EmployeePayrollRun Object ### Description The `EmployeePayrollRun` object is used to represent a payroll run for a specific employee.  ### Usage Example Fetch from the `LIST EmployeePayrollRun` endpoint and filter by `ID` to show all employee payroll runs.
    pub fn new() -> EmployeePayrollRun {
        EmployeePayrollRun {
            id: None,
            remote_id: None,
            employee: None,
            payroll_run: None,
            gross_pay: None,
            net_pay: None,
            start_date: None,
            end_date: None,
            check_date: None,
            earnings: None,
            deductions: None,
            taxes: None,
            remote_data: None,
            remote_was_deleted: None,
            field_mappings: None,
        }
    }
}


