/*
 * Merge HRIS API
 *
 * The unified API for building rich integrations with multiple HR Information System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 * Generated by: https://openapi-generator.tech
 */

/// DataPassthroughRequest : # The DataPassthrough Object ### Description The `DataPassthrough` object is used to send information to an otherwise-unsupported third-party endpoint.  ### Usage Example Create a `DataPassthrough` to get team hierarchies from your Rippling integration.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DataPassthroughRequest {
    #[serde(rename = "method")]
    pub method: Option<Box<crate::models::MethodEnum>>,
    #[serde(rename = "path")]
    pub path: String,
    #[serde(rename = "base_url_override", skip_serializing_if = "Option::is_none")]
    pub base_url_override: Option<String>,
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    /// Pass an array of `MultipartFormField` objects in here instead of using the `data` param if `request_format` is set to `MULTIPART`.
    #[serde(rename = "multipart_form_data", skip_serializing_if = "Option::is_none")]
    pub multipart_form_data: Option<Vec<crate::models::MultipartFormFieldRequest>>,
    /// The headers to use for the request (Merge will handle the account's authorization headers). `Content-Type` header is required for passthrough. Choose content type corresponding to expected format of receiving server.
    #[serde(rename = "headers", skip_serializing_if = "Option::is_none")]
    pub headers: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "request_format", skip_serializing_if = "Option::is_none")]
    pub request_format: Option<Box<crate::models::RequestFormatEnum>>,
    /// Optional. If true, the response will always be an object of the form `{\"type\": T, \"value\": ...}` where `T` will be one of `string, boolean, number, null, array, object`.
    #[serde(rename = "normalize_response", skip_serializing_if = "Option::is_none")]
    pub normalize_response: Option<bool>,
}

impl DataPassthroughRequest {
    /// # The DataPassthrough Object ### Description The `DataPassthrough` object is used to send information to an otherwise-unsupported third-party endpoint.  ### Usage Example Create a `DataPassthrough` to get team hierarchies from your Rippling integration.
    pub fn new(method: Option<crate::models::MethodEnum>, path: String) -> DataPassthroughRequest {
        DataPassthroughRequest {
            method: Box::new(method),
            path,
            base_url_override: None,
            data: None,
            multipart_form_data: None,
            headers: None,
            request_format: None,
            normalize_response: None,
        }
    }
}


